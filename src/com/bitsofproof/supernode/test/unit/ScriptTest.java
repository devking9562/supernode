/*
 * Copyright 2012 Tamas Blummer tamas@bitsofproof.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.bitsofproof.supernode.test.unit;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.BeforeClass;
import org.junit.Test;

import com.bitsofproof.supernode.core.ByteUtils;
import com.bitsofproof.supernode.core.Hash;
import com.bitsofproof.supernode.core.Script;
import com.bitsofproof.supernode.core.ValidationException;
import com.bitsofproof.supernode.core.WireFormat;
import com.bitsofproof.supernode.model.Tx;

public class ScriptTest
{
	@BeforeClass
	public static void setup ()
	{
	}

	@Test
	public void testGenesis () throws ValidationException
	{
		assertTrue (Script
				.parse (ByteUtils
						.fromHex ("4104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac"))
				.get (1).op == Script.Opcode.OP_CHECKSIG);
	}

	@Test
	public void stringTest ()
	{
		assertTrue (Script.toReadable (Script.fromReadable ("OP_PUSH2 abcd")).equals ("abcd"));

		assertTrue (Script
				.toReadable (
						Script.fromReadable ("OP_PUSH71 3044022002dbe4b5a2fbb521e4dc5fbec75fd960651a2754b03d0871b8c965469be50fa702206d97421fb7ea9359b63e48c2108223284b9a71560bd8182469b9039228d7b3d701 OP_PUSH33 0295bf727111acdeab8778284f02b768d1e21acbcbae42090cc49aaa3cc6d19cda"))
				.equals (
						"3044022002dbe4b5a2fbb521e4dc5fbec75fd960651a2754b03d0871b8c965469be50fa702206d97421fb7ea9359b63e48c2108223284b9a71560bd8182469b9039228d7b3d701 0295bf727111acdeab8778284f02b768d1e21acbcbae42090cc49aaa3cc6d19cda"));
	}

	@Test
	public void dataPushTest ()
	{
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_PUSH3 0a0b0c OP_PUSHDATA1 03 0a0b0c OP_EQUAL")));
	}

	@Test
	public void ifTest ()
	{
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_1 OP_EQUAL")));
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_IF OP_1 OP_ELSE OP_1 OP_ENDIF")));
		assertFalse (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_IF OP_FALSE OP_ELSE OP_1 OP_ENDIF OP_EQUAL")));
		assertFalse (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_IF OP_1 OP_IF OP_FALSE OP_ENDIF OP_ELSE OP_1 OP_ENDIF OP_EQUAL")));
		assertTrue (new Script ().evaluateSingleScript (Script
				.fromReadable ("OP_1 OP_NOTIF OP_FALSE OP_IF OP_FALSE OP_ENDIF OP_ELSE OP_1 OP_ENDIF OP_1 OP_EQUAL")));
	}

	@Test
	public void stackTest ()
	{
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_TOALTSTACK OP_FALSE OP_FROMALTSTACK OP_1 OP_EQUAL")));
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_2 OP_SWAP OP_1 OP_EQUAL")));
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_2 OP_3 OP_1 OP_PICK OP_2 OP_EQUAL")));
	}

	@Test
	public void mathTest ()
	{
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_2 OP_ADD OP_3 OP_EQUAL")));
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_3 OP_DUP OP_SUB OP_FALSE OP_EQUAL")));
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_5 OP_SUB OP_ABS OP_4 OP_EQUAL")));
		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_1 OP_5 OP_MAX OP_2 OP_MIN OP_2 OP_EQUAL")));
	}

	@Test
	public void digestTest ()
	{
		byte[] b = { 'H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '!' };
		byte[] h = Hash.sha256 (b);

		assertTrue (new Script ().evaluateSingleScript (Script.fromReadable ("OP_PUSHDATA1 0" + Integer.toString (b.length, 16) + " " + ByteUtils.toHex (b)
				+ " OP_SHA256 OP_PUSHDATA1 20 " + ByteUtils.toHex (h) + " OP_EQUAL")));
	}

	@Test
	public void transactionTest () throws ValidationException
	{
		WireFormat.Reader reader =
				new WireFormat.Reader (
						ByteUtils
								.fromHex ("0100000001169e1e83e930853391bc6f35f605c6754cfead57cf8387639d3b4096c54f18f40100000048473044022027542a94d6646c51240f23a76d33088d3dd8815b25e9ea18cac67d1171a3212e02203baf203c6e7b80ebd3e588628466ea28be572fe1aaa3f30947da4763dd3b3d2b01ffffffff0200ca9a3b00000000434104b5abd412d4341b45056d3e376cd446eca43fa871b51961330deebd84423e740daa520690e1d9e074654c59ff87b408db903649623e86f1ca5412786f61ade2bfac005ed0b20000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"));
		Tx t1 = new Tx ();
		t1.fromWire (reader);
		assertTrue (t1.getHash ().equals ("a16f3ce4dd5deb92d98ef5cf8afeaf0775ebca408f708b2146c4fb42b41e14be"));

		reader =
				new WireFormat.Reader (
						ByteUtils
								.fromHex ("0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704000000004847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000"));
		Tx t2 = new Tx ();
		t2.fromWire (reader);
		assertTrue (t2.getHash ().equals ("f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16"));
		t1.getInputs ().get (0).setSource (t2.getOutputs ().get (1));
		assertTrue (new Script (t1, 0).evaluate ());

		reader =
				new WireFormat.Reader (
						ByteUtils
								.fromHex ("0100000001944badc33f9a723eb1c85dde24374e6dee9259ef4cfa6a10b2fd05b6e55be400000000008c4930460221009f8aef83489d5c3524b68ddf77e8af8ceb5cba89790d31d2d2db0c80b9cbfd26022100bb2c13e15bb356a4accdd55288e8b2fd39e204a93d849ccf749eaef9d8162787014104f9804cfb86fb17441a6562b07c4ee8f012bdb2da5be022032e4b87100350ccc7c0f4d47078b06c9d22b0ec10bdce4c590e0d01aed618987a6caa8c94d74ee6dcffffffff0100f2052a010000001976a9146934efcef36903b5b45ebd1e5f862d1b63a99fa588ac00000000"));
		t1 = new Tx ();
		t1.fromWire (reader);
		assertTrue (t1.getHash ().equals ("74c1a6dd6e88f73035143f8fc7420b5c395d28300a70bb35b943f7f2eddc656d"));

		reader =
				new WireFormat.Reader (
						ByteUtils
								.fromHex ("01000000016d65dcedf2f743b935bb700a30285d395c0b42c78f3f143530f7886edda6c174000000008c493046022100b687c4436277190953466b3e4406484e89a4a4b9dbefea68cf5979f74a8ef5b1022100d32539ffb88736f3f9445fa6dd484b443ebb31af1471ee65071c7414e3ec007b014104f9804cfb86fb17441a6562b07c4ee8f012bdb2da5be022032e4b87100350ccc7c0f4d47078b06c9d22b0ec10bdce4c590e0d01aed618987a6caa8c94d74ee6dcffffffff0240420f000000000043410403c344438944b1ec413f7530aaa6130dd13562249d07d53ba96d8ac4f59832d05c837e36efd9533a6adf1920465fed2a4553fb357844f2e41329603c320753f4acc0aff62901000000434104f9804cfb86fb17441a6562b07c4ee8f012bdb2da5be022032e4b87100350ccc7c0f4d47078b06c9d22b0ec10bdce4c590e0d01aed618987a6caa8c94d74ee6dcac00000000"));
		t2 = new Tx ();
		t2.fromWire (reader);
		assertTrue (t2.getHash ().equals ("131f68261e28a80c3300b048c4c51f3ca4745653ba7ad6b20cc9188322818f25"));

		t2.getInputs ().get (0).setSource (t1.getOutputs ().get (0));
		assertTrue (new Script (t2, 0).evaluate ());

		reader =
				new WireFormat.Reader (
						ByteUtils
								.fromHex ("01000000017fd8dfdb54b5212c4e3151a39f4ffe279fd7f238d516a2ca731529c095d97449010000008b483045022100b6a7fe5eea81894bbdd0df61043e42780543457fa5581ac1af023761a098e92202201d4752785be5f9d1b9f8d362b8cf3b05e298a78c4abff874b838bb500dcf2a120141042e3c4aeac1ffb1c86ce3621afb1ca92773e02badf0d4b1c836eb26bd27d0c2e59ffec3d6ab6b8bbeca81b0990ab5224ebdd73696c4255d1d0c6b3c518a1a053effffffff01404b4c00000000001976a914dc44b1164188067c3a32d4780f5996fa14a4f2d988ac00000000"));
		t1 = new Tx ();
		t1.fromWire (reader);
		assertTrue (t1.getHash ().equals ("406b2b06bcd34d3c8733e6b79f7a394c8a431fbf4ff5ac705c93f4076bb77602"));

		reader =
				new WireFormat.Reader (
						ByteUtils
								.fromHex ("01000000010276b76b07f4935c70acf54fbf1f438a4c397a9fb7e633873c4dd3bc062b6b40000000008c493046022100d23459d03ed7e9511a47d13292d3430a04627de6235b6e51a40f9cd386f2abe3022100e7d25b080f0bb8d8d5f878bba7d54ad2fda650ea8d158a33ee3cbd11768191fd004104b0e2c879e4daf7b9ab68350228c159766676a14f5815084ba166432aab46198d4cca98fa3e9981d0a90b2effc514b76279476550ba3663fdcaff94c38420e9d5000000000100093d00000000001976a9149a7b0f3b80c6baaeedce0a0842553800f832ba1f88ac00000000"));
		t2 = new Tx ();
		t2.fromWire (reader); // this is the transaction with the wrong SIGHASH_ALL
		assertTrue (t2.getHash ().equals ("c99c49da4c38af669dea436d3e73780dfdb6c1ecf9958baa52960e8baee30e73"));

		t2.getInputs ().get (0).setSource (t1.getOutputs ().get (0));
		assertTrue (new Script (t2, 0).evaluate ());

		// S value negative
		t1 =
				Tx.fromWireDump ("0100000001289eb02e8ddc1ee3486aadc1cd1335fba22a8e3e87e3f41b7c5bbe7fb4391d81010000008a47304402206b5c3b1c86748dcf328b9f3a65e10085afcf5d1af5b40970d8ce3a9355e06b5b0220cdbdc23e6d3618e47056fccc60c5f73d1a542186705197e5791e97f0e6582a32014104f25ec495fa21ad14d69f45bf277129488cfb1a339aba1fed3c5099bb6d8e9716491a14050fbc0b2fed2963dc1e56264b3adf52a81b953222a2180d48b54d1e18ffffffff0140420f00000000001976a914e6ba8cc407375ce1623ec17b2f1a59f2503afc6788ac00000000");
		t2 =
				Tx.fromWireDump ("01000000014213d2fe8f942dd7a72df14e656baab0e8b2b7f59571771ddf170b588379a2b6010000008b483045022037183e3e47b23634eeebe6fd155f0adbde756bf00a6843a1317b6548a03f3cfe0221009f96bec8759837f844478a35e102618918662869188f99d32dffe6ef7f81427e014104a7d3b0dda6d4d0a44b137a65105cdfed890b09ce2d283d5683029f46a00e531bff1deb3ad3862e0648dca953a4250b83610c4f20861555a2f5638bd3d7aff93dffffffff02ddfb1100000000001976a9142256ff6b9b9fea32bfa8e64aed10ee695ffe100988ac40420f00000000001976a914c62301ef02dfeec757fb8dedb8a45eda5fb5ee4d88ac00000000");

		t1.getInputs ().get (0).setSource (t2.getOutputs ().get (1));
		assertTrue (new Script (t1, 0).evaluate ());

		// R value negative
		t1 =
				Tx.fromWireDump ("01000000024448a3999e6b39584d6acffbc620376d26ec88303913a137d286be0ea7c5931c000000008a473044022090f7346fa0f6a4dc4b31300bf93be229001a1104532829644e07f45814bb734e0220579da5a14362f46bfd7c2be0d19c67caedc812147b9b8d574e34a3932cf21f7a014104e9469f3c23309dd1eb3557ba2536ae7b58743425739c00c4af436998a0974d20edcb3c5a4cb621f103915df1271fdb56e58bd8161fbe24a726906328f48f9700ffffffff4448a3999e6b39584d6acffbc620376d26ec88303913a137d286be0ea7c5931c010000008a4730440220f7e67e0ffdd05f9c551bcf45ba94db0edb85907526ceece4d28269192edd082c0220cb5655b709086096412ffdfc0e3b8b74405da325a4701cfe2eddee41a3395982014104e9469f3c23309dd1eb3557ba2536ae7b58743425739c00c4af436998a0974d20edcb3c5a4cb621f103915df1271fdb56e58bd8161fbe24a726906328f48f9700ffffffff02a0c44a00000000001976a914623dbe779a29c6bc2615cd7bf5a35453f495e22988ac900e4d00000000001976a9149e969049aefe972e41aaefac385296ce18f3075188ac00000000");
		t2 =
				Tx.fromWireDump ("010000000104cc410a858127cad099f4ea6e1942a9a9002c14acc6d1bbbc223c8ec97e482a010000008a47304402207547807093f864090cb68a5913499ce75554404e8f47699bea33a78f2d63dabd0220706d44bfdf2c6e10a11b8c0b800eef5fb06ecaae60e2653a742c4b4d58436182014104e9469f3c23309dd1eb3557ba2536ae7b58743425739c00c4af436998a0974d20edcb3c5a4cb621f103915df1271fdb56e58bd8161fbe24a726906328f48f9700ffffffff02a0860100000000001976a9149e969049aefe972e41aaefac385296ce18f3075188ac904c9600000000001976a9149e969049aefe972e41aaefac385296ce18f3075188ac00000000");

		t1.getInputs ().get (0).setSource (t2.getOutputs ().get (0));
		assertTrue (new Script (t1, 0).evaluate ());

		// Multisig 1-1
		t1 =
				Tx.fromWireDump ("01000000024de8b0c4c2582db95fa6b3567a989b664484c7ad6672c85a3da413773e63fdb8000000006b48304502205b282fbc9b064f3bc823a23edcc0048cbb174754e7aa742e3c9f483ebe02911c022100e4b0b3a117d36cab5a67404dddbf43db7bea3c1530e0fe128ebc15621bd69a3b0121035aa98d5f77cd9a2d88710e6fc66212aff820026f0dad8f32d1f7ce87457dde50ffffffff4de8b0c4c2582db95fa6b3567a989b664484c7ad6672c85a3da413773e63fdb8010000006f004730440220276d6dad3defa37b5f81add3992d510d2f44a317fd85e04f93a1e2daea64660202200f862a0da684249322ceb8ed842fb8c859c0cb94c81e1c5308b4868157a428ee01ab51210232abdc893e7f0631364d7fd01cb33d24da45329a00357b3a7886211ab414d55a51aeffffffff02e0fd1c00000000001976a914380cb3c594de4e7e9b8e18db182987bebb5a4f7088acc0c62d000000000017142a9bc5447d664c1d0141392a842d23dba45c4f13b17500000000");
		t2 =
				Tx.fromWireDump ("01000000017ea56cd68c74b4cd1a2f478f361b8a67c15a6629d73d95ef21d96ae213eb5b2d010000006a4730440220228e4deb3bc5b47fc526e2a7f5e9434a52616f8353b55dbc820ccb69d5fbded502206a2874f7f84b20015614694fe25c4d76f10e31571f03c240e3e4bbf1f9985be201210232abdc893e7f0631364d7fd01cb33d24da45329a00357b3a7886211ab414d55affffffff0230c11d00000000001976a914709dcb44da534c550dacf4296f75cba1ba3b317788acc0c62d000000000017142a9bc5447d664c1d0141392a842d23dba45c4f13b17500000000");

		t1.getInputs ().get (1).setSource (t2.getOutputs ().get (1));
		assertTrue (new Script (t1, 1).evaluate ());

		// Multisig 3-1
		t1 =
				Tx.fromWireDump ("010000000290c5e425bfba62bd5b294af0414d8fa3ed580c5ca6f351ccc23e360b14ff7f470100000091004730440220739d9ab2c3e7089e7bd311f267a65dc0ea00f49619cb61ec016a5038016ed71202201b88257809b623d471e429787c36e0a9bcd2a058fc0c75fd9c25f905657e3b9e01ab512103c86390eb5230237f31de1f02e70ce61e77f6dbfefa7d0e4ed4f6b3f78f85d8ec2103193f28067b502b34cac9eae39f74dba4815e1278bab31516efb29bd8de2c1bea52aeffffffffdd7f3ce640a2fb04dbe24630aa06e4299fbb1d3fe585fe4f80be4a96b5ff0a0d01000000b400483045022100a28d2ace2f1cb4b2a58d26a5f1a2cc15cdd4cf1c65cee8e4521971c7dc60021c0220476a5ad62bfa7c18f9174d9e5e29bc0062df543e2c336ae2c77507e462bbf95701ab512103c86390eb5230237f31de1f02e70ce61e77f6dbfefa7d0e4ed4f6b3f78f85d8ec2103193f28067b502b34cac9eae39f74dba4815e1278bab31516efb29bd8de2c1bea21032462c60ebc21f4d38b3c4ccb33be77b57ae72762be12887252db18fd6225befb53aeffffffff02e0fd1c00000000001976a9148501106ab5492387998252403d70857acfa1586488ac50c3000000000000171499050637f553f03cc0f82bbfe98dc99f10526311b17500000000");
		t2 =
				Tx.fromWireDump ("0100000001eae7c33c5a3ad25316a4a1a0220343693077d7a35c6d242ed731d9f26c9f8b45010000006b48304502205b910ff27919bb4b81847e17e19848a8148373b5d84856e8a0798395c1a4df6e022100a9300a11b37b52997726dab17851914151bd647ca053d60a013b8e0ad42d1c6e012102b2e1e38d1b15170212a852f68045979d790814a139ed57bffba3763f75e18808ffffffff02b0453c00000000001976a914c39c8d989dfdd7fde0ee80be36113c5abcefcb9c88ac40420f0000000000171464d63d835705618da2111ca3194f22d067187cf2b17500000000");

		t1.getInputs ().get (0).setSource (t2.getOutputs ().get (1));
		assertTrue (new Script (t1, 0).evaluate ());

		// FROM TESTNET3
		t1 =
				Tx.fromWireDump ("010000000560e0b5061b08a60911c9b2702cc0eba80adbe42f3ec9885c76930837db5380c001000000054f01e40164ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b959000000000351519bffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b959020000000452018293ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b95903000000045b5a5193ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b95904000000045b5a5193ffffffff06002d310100000000029f91002d3101000000000401908f87002d31010000000001a0002d3101000000000705feffffff808730d39700000000001976a9140467f85e06a2ef0a479333b47258f4196fb94b2c88ac002d3101000000000604ffffff7f9c00000000");

		t2 =
				Tx.fromWireDump ("01000000017ae001aef566f8273a7cd14dcbc1d2bcd7927de792c5042375033991ef5523c3000000006a47304402200bb34283458a6f141fbea8dd9c3f4db0abb8dea2282364821886e60f313be94502201198397af91be19622e8ec1e52e2e7cb5ce21640d490f1ca7fb22452e01e1fee012103e4d7f9492784fc6b3439607be821148e0d4f11ca35de74521d277500203492eaffffffff024073a574000000001976a91457722497e036129a643d767d3a9559b9dea58d0788ac809698000000000001a500000000");

		t1.getInputs ().get (0).setSource (t2.getOutputs ().get (1));
		// OP_1NEGATE e4 64 | OP_WITHIN
		assertTrue (new Script (t1, 0).evaluate ());

		t1 =
				Tx.fromWireDump ("010000000560e0b5061b08a60911c9b2702cc0eba80adbe42f3ec9885c76930837db5380c001000000054f01e40164ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b959000000000351519bffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b959020000000452018293ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b95903000000045b5a5193ffffffff0d2fe5749c96f15e37ceed29002c7f338df4f2781dd79f4d4eea7a08aa69b95904000000045b5a5193ffffffff06002d310100000000029f91002d3101000000000401908f87002d31010000000001a0002d3101000000000705feffffff808730d39700000000001976a9140467f85e06a2ef0a479333b47258f4196fb94b2c88ac002d3101000000000604ffffff7f9c00000000");

		t2 =
				Tx.fromWireDump ("0100000001187a61689aee9607a8e044b71ce702e12e8f77242ad06c221056a2e62af8de9f000000006a47304402207d51095aa9656fa0d2d1f80388120842b451bdb63eebe363d21a53c0463fa858022079c8a5c6aad5a2b841c9ff6dd015a8a8c45815214beb8b6b5194cebadf65a404012103c772f985417a0edf508eda460fdc897db776b6374b15ddb37a024f54a2c918a7ffffffff05809698000000000001614010fd34000000001976a9141c3283713d3dcc8983e1cd0b171cac3303b3820188ac002d31010000000002008780c3c90100000000019c005a620200000000029d5100000000");

		t1.getInputs ().get (2).setSource (t2.getOutputs ().get (2));
		// OP_2 82 OP_ADD | 0 OP_EQUAL
		assertTrue (new Script (t1, 2).evaluate ());

		t1 =
				Tx.fromWireDump ("0100000039487c43212019ccf8d7aadd11e379660c725252d62392b0320358e05a7d4b800f01000000025454ffffffffaf04daa3fe30686ac50ec79c723bdb0e63dd32b01c7b8fb813be64a4383ddb8801000000025b5affffffffee72cdc17d814687d2833acfa9522b516ce0408df1f360a39328472e72ba516f010000000b0004ffffffff04ffffff7fffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e88000000000804ffffff7f8f7693ffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e8801000000045b5a5193ffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e8802000000025b5affffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e880300000003515193ffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e88040000000704ffffff7f00a4ffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e880500000003018b5bffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e880600000004000164a4ffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e8808000000034f00a3ffffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e8809000000025b5affffffff758c2505677a5c4a4dd26767f0ac7e03dd3d3c04a81d298c1799aa9fb55b1e880a000000070004ffffffffa3ffffffff7eed6a9b31bde9eb8b5be9c52a2dc7086e4d0b8ba35507f41eeab9b451ad3adc00000000025b5affffffff7eed6a9b31bde9eb8b5be9c52a2dc7086e4d0b8ba35507f41eeab9b451ad3adc0100000003019090ffffffff7eed6a9b31bde9eb8b5be9c52a2dc7086e4d0b8ba35507f41eeab9b451ad3adc02000000025b5affffffff7eed6a9b31bde9eb8b5be9c52a2dc7086e4d0b8ba35507f41eeab9b451ad3adc030000000804ffffff7f8f7693ffffffff7eed6a9b31bde9eb8b5be9c52a2dc7086e4d0b8ba35507f41eeab9b451ad3adc040000008b483045022100c7fe9b6f31139a1ee27a62f39c61fe7a14dda171c7f1701d2ca3782b914f93f202205e0476298598272da5b65e1fb6f1fedc463f3661c5570ec45d05211a2797e4400141041dfd517e87086f22312edb04c14bf9413532571c3b10ce18831ed354b4c31f09b63ee3395f490eb1f8db6b7ff7f4db0378dfcf907883f2f512d4b37600bd79f2ffffffff7eed6a9b31bde9eb8b5be9c52a2dc7086e4d0b8ba35507f41eeab9b451ad3adc050000000704ffffff7f00a4ffffffffe6df90b4d83bf4c8beb39c3ef91d848573a1309cde0938516971ebed52ca95600100000003016f92ffffffff5e1c8690f71ab118633b871abe0a3768dc22c3b0f89a53ccd3eec55b5606a398010000000351519bffffffffec86cfd1a95ca2926028910053cb5b4b849d59864f73a5e339393e8d807056720100000003018b5bffffffffe1871049b9bec6119dcb1f3eb5e3739e36790a7fe1447cd855ca1b4213b421db01000000026090ffffffff518db6dec81b0ecf3c5b11b687d3b9cf7bf8800f128908b814b3762386c95af001000000020000ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef01000000030051a3ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef02000000025192ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef0300000003018b5bffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef0400000003019090ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef050000000161ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef0600000005016f5a5193ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef0700000003515193ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef080000000300009affffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef0900000004000164a4ffffffff94173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef0a000000070004ffffffffa3ffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb000000000804ffffff7f8f7693ffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb0200000003016f8cffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb030000000b0004ffffffff04ffffff7fffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb04000000020000ffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb05000000045b5a5193ffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb06000000025a5bffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb07000000025454ffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb08000000070004ffffffffa3ffffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb09000000025b5affffffff3163c76b0783271044b4c5f5d20f54d564de1ebf64dc04cdb4f315af8bd00dcb0a0000000704ffffff7f00a4ffffffffcd1080fa2175680e48642e2e60a76ce71dd3d6e02fa563411d42274bebfa2100010000000b0004ffffffff04ffffff7fffffffff27d71587cd6ad54965031719db154b2471c243a5309066f9048f8439dd0b6d7d01000000020000ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec4400000000025b5affffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec440100000003510051ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec4403000000025192ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec44040000000704ffffff7f7693ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec440500000006016f51935c94ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec440600000003019090ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec440700000003515193ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec4408000000025b5affffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec4409000000045b5a5193ffffffff48f8ec7c5f8f177890356462aded52af5a2bf1cdff502a370d8557535dafec440a000000020092ffffffff337d70b2faaad9e51b0f868c9d7b11fc7f61ae374e99cae73e652439ced657fc0100000004000164a4ffffffff0140700c1b000000001976a914f7cce8fe923ca6bf117d1d806948a8c50acd2a4288ac00000000");

		t2 =
				Tx.fromWireDump ("010000000114da74d7e2da39b2b2d676b957e3edc3619f4999922f3fa66c95b64be8fd92a3000000004a49304602210098dc303772a6969789d18d5a71bacc34b53b986c08ea54cb38991d9ec52123e8022100ee0d85fc13a6432512842ec917f17f111b5395ca18c7a0fdd3cca39fb5b8430001ffffffff0b0074af26010000001976a91474f0a927d6aa7ff3a103e59451c9bb7539ae3f1988ac200b20000000000002009ce0d14d000000000002518760566c000000000001a1201d9a00000000000401908f87a08f3e00000000000151a0987b0000000000019e604d2f000000000002528720145d00000000000191e0c81000000000000301649ce0da8a00000000000604ffffffff9c00000000");

		t1.getInputs ().get (28).setSource (t2.getOutputs ().get (5));
		// OP_NOP | OP_1
		assertTrue (new Script (t1, 28).evaluate ());

		t1 =
				Tx.fromWireDump ("01000000014f0ccb5158e5497900b7563c5e0ab7fad5e169b9f46e8ca24c84b1f2dc91911f000000008b483045022100fa76a695c678f040264492dc71a29310d58c78e208bd1d8e384ef507b7b7229902201fb047807170aa590dbc5ff4d6e5b4b050ccb0fc4385ced9e0c129338c6729490141044a3549784ccf7b3711e1a0482ba7ebcb252c2997c6422c5dfce88ccb797643fa485ba80a26ef977ea703b39f299421f032c74cac9847cafd3478466aa5fea16cffffffff03b0f21514010000001976a914a009272d8f4457aa878fbb378ca0a31f1bac69c888ac00e1f50500000000fd0b024de1f50500000000ac515253545556576f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f00000000");
		// PUSH2 test
		t1.toJSON ();

		t1 =
				Tx.fromWireDump ("010000003422300a976c1f0f6bd6172ded8cb76c23f6e57d3b19e9ff1f403990e70acf19560300000006011601150114ffffffff22300a976c1f0f6bd6172ded8cb76c23f6e57d3b19e9ff1f403990e70acf19560400000006011601150114ffffffff22300a976c1f0f6bd6172ded8cb76c23f6e57d3b19e9ff1f403990e70acf19560900000006050000008000ffffffff42e9e966f8c293ad44c0b726ec85c5338d1f30cee63aedfb6ead49571477f22909000000020051ffffffff42e9e966f8c293ad44c0b726ec85c5338d1f30cee63aedfb6ead49571477f2290a000000034f00a3ffffffff4f0ccb5158e5497900b7563c5e0ab7fad5e169b9f46e8ca24c84b1f2dc91911f030000000151ffffffff4f0ccb5158e5497900b7563c5e0ab7fad5e169b9f46e8ca24c84b1f2dc91911f040000000451525355ffffffff4f0ccb5158e5497900b7563c5e0ab7fad5e169b9f46e8ca24c84b1f2dc91911f0500000003016f8cffffffff4f0ccb5158e5497900b7563c5e0ab7fad5e169b9f46e8ca24c84b1f2dc91911f09000000025d5effffffff5649f4d40acc1720997749ede3abb24105e637dd309fb3deee4a49c49d3b4f1a0400000005016f5a5193ffffffff5649f4d40acc1720997749ede3abb24105e637dd309fb3deee4a49c49d3b4f1a06000000065a005b6b756cffffffff5649f4d40acc1720997749ede3abb24105e637dd309fb3deee4a49c49d3b4f1a080000000100ffffffff67e36cd8a0a57458261704363fc21ce927b8214b381bcf86c0b6bd8f23e5e70c0100000006011601150114ffffffff6ded57e5e632ec542b8ab851df40400c32052ce2b999cf2c6c1352872c5d6537040000000704ffffff7f7693ffffffff6ded57e5e632ec542b8ab851df40400c32052ce2b999cf2c6c1352872c5d6537050000001b1a6162636465666768696a6b6c6d6e6f707172737475767778797affffffff6ded57e5e632ec542b8ab851df40400c32052ce2b999cf2c6c1352872c5d653708000000044d010008ffffffff6ded57e5e632ec542b8ab851df40400c32052ce2b999cf2c6c1352872c5d65370a000000025191ffffffff6f3c0204703766775324115c32fd121a16f0df64f0336490157ebd94b62e059e02000000020075ffffffff8f339185bdf4c571055114df3cbbb9ebfa31b605b99c4088a1b226f88e0295020100000006016f51935c94ffffffff8f339185bdf4c571055114df3cbbb9ebfa31b605b99c4088a1b226f88e029502020000000403008000ffffffff8f339185bdf4c571055114df3cbbb9ebfa31b605b99c4088a1b226f88e029502060000001b1a6162636465666768696a6b6c6d6e6f707172737475767778797affffffff8f339185bdf4c571055114df3cbbb9ebfa31b605b99c4088a1b226f88e02950207000000044f005152ffffffff8f339185bdf4c571055114df3cbbb9ebfa31b605b99c4088a1b226f88e0295020a00000003515193ffffffff925f27a4db9032976b0ed323094dcfd12d521f36f5b64f4879a20750729a330300000000025100ffffffff925f27a4db9032976b0ed323094dcfd12d521f36f5b64f4879a20750729a33030500000006011601150114ffffffff925f27a4db9032976b0ed323094dcfd12d521f36f5b64f4879a20750729a3303080000000100ffffffff925f27a4db9032976b0ed323094dcfd12d521f36f5b64f4879a20750729a33030a00000002010bffffffffadb5b4d9c20de237a2bfa5543d8d53546fdeffed9b114e307b4d6823ef5fcd2203000000014fffffffffb1ecb9e79ce8f54e8529feeeb668a72a7f0c49831f83d76cfbc83155b8b9e1fe010000000100ffffffffb1ecb9e79ce8f54e8529feeeb668a72a7f0c49831f83d76cfbc83155b8b9e1fe0300000006011601150114ffffffffb1ecb9e79ce8f54e8529feeeb668a72a7f0c49831f83d76cfbc83155b8b9e1fe050000000351009affffffffb1ecb9e79ce8f54e8529feeeb668a72a7f0c49831f83d76cfbc83155b8b9e1fe060000000403ffff7fffffffffb1ecb9e79ce8f54e8529feeeb668a72a7f0c49831f83d76cfbc83155b8b9e1fe090000000351009bffffffffb8870d0eb7a246fe332401c2f44c59417d56b30de2640514add2e54132cf4bad0200000006011601150114ffffffffb8870d0eb7a246fe332401c2f44c59417d56b30de2640514add2e54132cf4bad04000000045b5a5193ffffffffc162c5adb8f1675ad3a17b417076efc8495541bcb1cd0f11755f062fb49d1a7a010000000151ffffffffc162c5adb8f1675ad3a17b417076efc8495541bcb1cd0f11755f062fb49d1a7a08000000025d5effffffffc162c5adb8f1675ad3a17b417076efc8495541bcb1cd0f11755f062fb49d1a7a0a000000045b5a5193ffffffffcc68b898c71166468049c9a4130809555908c30f3c88c07e6d28d2f6a6bb486b06000000020051ffffffffcc68b898c71166468049c9a4130809555908c30f3c88c07e6d28d2f6a6bb486b0800000003028000ffffffffce1cba7787ec167235879ca17f46bd4bfa405f9e3e2e35c544537bbd65a5d9620100000006011601150114ffffffffce1cba7787ec167235879ca17f46bd4bfa405f9e3e2e35c544537bbd65a5d962030000000704ffffff7f7693ffffffffd6bb18a96b21035e2d04fcd54f2f503d199aeb86b8033535e06ffdb400fb5829010000000100ffffffffd6bb18a96b21035e2d04fcd54f2f503d199aeb86b8033535e06ffdb400fb582907000000025d5effffffffd6bb18a96b21035e2d04fcd54f2f503d199aeb86b8033535e06ffdb400fb582909000000025b5affffffffd878941d1968d5027129e4b462aead4680bcce392c099d50f294063a528dad9c030000000161ffffffffd878941d1968d5027129e4b462aead4680bcce392c099d50f294063a528dad9c06000000034f4f93ffffffffe7ea17c77cbad48a8caa6ca87749ef887858eb3becc55c65f16733837ad5043a0200000006011601150114ffffffffe7ea17c77cbad48a8caa6ca87749ef887858eb3becc55c65f16733837ad5043a0300000003016f92ffffffffe7ea17c77cbad48a8caa6ca87749ef887858eb3becc55c65f16733837ad5043a050000000704ffffff7f7693ffffffffe7ea17c77cbad48a8caa6ca87749ef887858eb3becc55c65f16733837ad5043a08000000025173fffffffff24629f6d9f2b7753e1b6fe1104f8554de1ce6be0dfb4f262a28c38587ed5b34060000000151ffffffff0290051000000000001976a914954659bcb93fdad012a00d825a9bce69dc7c6a2688ac800c49110000000008517a01158874528700000000");

		t2 =
				Tx.fromWireDump ("010000000194173b45a42a8eea30be107c5131d0d527913706850f100b4df44e20ec6d98ef000000008a47304402202caf4e621a477d119d9979e546d6fc039aeea0df314a9cfde4364de9cba507a002207749aba0f7f8dab09eb4dfde256623e2b412e888b561fced70d94568ecdd3023014104eb719bacfed45e78310f7ebe092a7ff5dc38662bd37887ee880910e15f3169e42dc88a921827044894f8fe0b4605c1c98a5fa78dd9da602493846e6c9f563e3dffffffff0b200b2000000000001ba9014c011414c286a1af0947f58d1ad787385b1c2c4a976f9e7187a08f3e0000000000056301506851e0d14d0000000000076463516700686860566c0000000000024f9c201d9a0000000000019ea0987b00000000000cb0b1b2b3b4b5b6b7b8b95187e0c81000000000000493011587604d2f0000000000085179011588745387e0da8a000000000005636267516800f65823010000001976a914c54cc5e7985aef373ecc88dc60dfb01f4bceaee388ac20145d00000000000382528700000000");

		t1.getInputs ().get (11).setSource (t2.getOutputs ().get (8));

		System.out.println (new Script (t1, 11).dumpConnected ());
		System.out.println (new Script (t1, 11).toReadableConnected ());
		// 0 | OP_IF OP_VER OP_ELSE OP_1 OP_ENDIF
		assertTrue (new Script (t1, 11).evaluate ());
	}
}
